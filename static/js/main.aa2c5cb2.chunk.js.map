{"version":3,"sources":["components/imgCard.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","img","alt","username","description","likes","className","src","icon","faUser","size","faHeart","App","useState","imgBanner","setImgBanner","imgList","setimgList","useEffect","Axios","defaults","headers","common","process","REACT_APP_ACCESS_KEY","fetchImgList","fetchImgBanner","get","then","res","data","catch","err","console","log","href","style","backgroundImage","urls","regular","type","id","name","placeholder","faSearch","map","small","key","alt_description","user","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0QAiBeA,EAbC,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,IAAkBC,GAAqB,EAAlCC,YAAkC,EAArBD,UAAUE,EAAW,EAAXA,MAC/C,OACI,yBAAKC,UAAY,iBACb,yBAAMC,IAAKN,EAAKC,IAAKA,EAAKI,UAAY,eACtC,yBAAKA,UAAY,eAEb,2BAAG,kBAAC,IAAD,CAAiBA,UAAY,OAAOE,KAAMC,IAAQC,KAAK,OAAQP,GAClE,2BAAG,kBAAC,IAAD,CAAiBG,UAAY,OAAOE,KAAMG,IAASD,KAAK,OAAQL,MCkFpEO,MAtFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIbC,qBAAU,WACRC,IAAMC,SAASC,QAAQC,OAAvB,kCAA8DC,0HAAYC,sBAC1EC,IACAC,MAEC,IAEH,IAAMD,EAAgB,WACpBN,IAAMQ,IAAI,oCACPC,MAAK,SAAAC,GAEJ,OAAOA,EAAIC,QAEZC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAEbJ,MAAK,SAAAE,GACJb,EAAWa,GACXG,QAAQC,IAAIJ,OAIZJ,EAAkB,WACtBP,IAAMQ,IAAI,0CACPC,MAAK,SAAAC,GAEJ,OAAOA,EAAIC,QAEZC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAEbJ,MAAK,SAAAE,GACJf,EAAae,OAKnB,OACE,yBAAKxB,UAAU,QACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAW,IACd,8BACA,uBAAG6B,KAAM,KAAT,UACA,4BACE,4BAAI,uBAAGA,KAAM,KAAT,UACJ,4BAAI,uBAAGA,KAAM,KAAT,WACJ,4BAAI,uBAAGA,KAAM,KAAT,eAIR,yBAAK7B,UAAU,SAAS8B,MAAQ,CAACC,gBAAmBvB,EAAD,cAAwBA,EAAUwB,KAAKC,QAAvC,KAAa,KAC9D,yBAAKjC,UAAU,WACb,yBAAKA,UAAY,qBACjB,6EACA,yBAAKA,UAAW,eAChB,2BAAOkC,KAAK,OAAOC,GAAG,MAAMC,KAAK,MAAMC,YAAY,yBACnD,4BAAQH,KAAK,UAAS,kBAAC,IAAD,CAAiBhC,KAAMoC,IAAUlC,KAAK,SAE5D,yBAAKJ,UAAU,cACb,uCACA,2CACA,8CAON,yBAAKA,UAAU,qBACXU,EAGAA,EAAQ6B,KAAI,SAAA5C,GACV,OAAO,kBAAC,EAAD,CAASA,IAAOA,EAAIqC,KAAKQ,MAAOC,IAAK9C,EAAIwC,GAAIvC,IAAOD,EAAI+C,gBAAiB5C,YAAeH,EAAIG,YAAaD,SAAYF,EAAIgD,KAAK9C,SAAUE,MAASJ,EAAII,WAH9J,iBCrEQ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.aa2c5cb2.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart, faUser } from '@fortawesome/free-solid-svg-icons'\n\nconst ImgCard = ({img, alt, description, username, likes}) => {\n    return (\n        <div className = \"img-container\">\n            <img  src={img} alt={alt} className = \"img-square\"/>\n            <div className = \"img-overlay\">\n            \n                <p><FontAwesomeIcon className = \"icon\" icon={faUser} size='1x' />{username}</p>\n                <p><FontAwesomeIcon className = \"icon\" icon={faHeart} size='1x' />{likes}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ImgCard","import React, { useState, useEffect } from 'react';\nimport './styles/App.css';\nimport Axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport ImgCard from './components/imgCard.js'\n\nfunction App() {\n  const [imgBanner, setImgBanner] = useState('');\n  const [imgList, setimgList] = useState([]);\n\n  useEffect(() => {\n    Axios.defaults.headers.common['Authorization'] = `Client-ID ${process.env.REACT_APP_ACCESS_KEY}`\n    fetchImgList()\n    fetchImgBanner()\n\n  }, []);\n\n  const fetchImgList = (() => {\n    Axios.get(\"https://api.unsplash.com/photos/\")\n      .then(res => {\n        // console.log(res)\n        return res.data\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .then(data => {\n        setimgList(data)\n        console.log(data)\n      })\n  });\n\n  const fetchImgBanner = (() => {\n    Axios.get(\"https://api.unsplash.com/photos/random\")\n      .then(res => {\n        // console.log(res)\n        return res.data\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .then(data => {\n        setImgBanner(data)\n        // console.log(data)\n      })\n  });\n\n  return (\n    <div className=\"App \">\n      <header className=\"App-header\">\n        <nav className =\"\">\n          <menu>\n          <a href =\"/\">Framed</a>\n          <ul>\n            <li><a href =\"/\">about</a></li>\n            <li><a href =\"/\">follow</a ></li>\n            <li><a href =\"/\">contact</a></li>\n          </ul>\n          </menu>\n        </nav>\n        <div className=\"banner\" style= {{backgroundImage: (!imgBanner ? \"\" :`url(${imgBanner.urls.regular})`)}}>\n          <div className=\"overlay\">\n            <div className = \"content container\" >\n            <h1>The coolest pics framed by the coolest people</h1>\n            <div className= \"input-group\">\n            <input type=\"text\" id=\"img\" name=\"img\" placeholder=\"Search for some pics\"/>\n            <button type=\"submit\"><FontAwesomeIcon icon={faSearch} size='2x' /></button>\n            </div>\n            <div className=\"button-row\">\n              <button>New</button>\n              <button>Popular</button>\n              <button>Random</button>\n            </div>\n            </div>\n            \n           \n          </div>\n        </div>\n        <div className=\"gallery container\">\n          {!imgList ?\n            \"loading...\"\n            :\n            imgList.map(img => {\n              return <ImgCard img = {img.urls.small} key={img.id} alt = {img.alt_description} description = {img.description} username = {img.user.username} likes = {img.likes}/>\n            })}\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}